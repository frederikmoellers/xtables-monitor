#!/usr/bin/env python3

import argparse
import functools
import jinja2
import os
import os.path
import subprocess
import sys
import xtmlib
import xtmlib.files

from xtmlib import xtables_commands
from xtmlib.counters import get_counters
from xtmlib.interfaces import get_interfaces

# argument parser
argument_parser = argparse.ArgumentParser(
    description="Create netfilter rules from templates"
)
argument_parser.add_argument(
    "template",
    help="The template file to use for rule generation"
)
argument_parser.add_argument(
    "-a", "--apply",
    action="store_true",
    help="Apply the generated rules using ip[6]tables-restore. By default, "
         "rules are printed to stdout."
)
argument_parser.add_argument(
    "-i", "--ip-version",
    type=int,
    choices=xtables_commands.keys(),
    help="Perform setup for selected IP version only (e.g. 4)",
    metavar="version"
)
for ip_version in xtables_commands.keys():
    argument_parser.add_argument(
        "-{}".format(ip_version),
        action="store_const",
        const=ip_version,
        help="Alias for '-i {}'".format(ip_version),
        dest="ip_version",
    )
argument_parser.add_argument(
    "-v", "--verbose",
    action="store_true",
    help="Show verbose output"
)
arguments = argument_parser.parse_args()

# set debug variable
xtmlib.debug_mode = arguments.verbose

# make a list of IP versions to process
if arguments.ip_version:
    ip_versions = [arguments.ip_version, ]
else:
    ip_versions = xtables_commands.keys()

# handle each IP version separately
for ip_version in ip_versions:
    xtmlib.debug("Performing setup for IPv%d" % ip_version)
    xtmlib.debug_indent(1)

    # get network interface information
    interfaces = get_interfaces(ip_version)
    counters = get_counters(ip_version)

    # setup jinja
    template_loader = jinja2.FileSystemLoader(
        [os.getcwd(), "/etc/xtables-monitor/", "/"],
        followlinks=True
    )
    template_environment = jinja2.Environment(loader=template_loader)
    template = template_environment.get_template(arguments.template)

    # setup render variables
    render_vars = {"counters": counters, "interfaces": interfaces, "ip_version": ip_version}
    for ipv in ip_versions:
        if ipv == ip_version:
            b = True
        else:
            b = False
        render_vars["ipv%d" % ipv] = b
    render_vars["ip_list"] = functools.partial(xtmlib.files.ip_list, ip_version, os.path.dirname(template.filename))
    
    # if apply is set, start program
    if arguments.apply:
        cmdline = [xtables_commands[ip_version] + "-restore", "-c"]
        if xtmlib.debug_mode:
            cmdline.append("-v")
        xtmlib.debug("Starting iptables process: '%s'" % repr(cmdline))
        process = subprocess.Popen(
            cmdline,
            stdin=subprocess.PIPE,
            stdout=sys.stdout,
            stderr=sys.stderr,
            universal_newlines=True
        )
        output = process.stdin
    else:
        output = sys.stdout

    # print/apply each line
    for line in template.render(render_vars).splitlines():
        # strip leading whitespace
        line = line.lstrip()
        # skip empty lines
        if not line:
            continue
        # print line if applying rules
        if arguments.apply:
            xtmlib.debug(line)
        print(line, file=output)

    # if apply is set, wait for the program to finish
    if arguments.apply:
        stdout, stderr = process.communicate()
        xtmlib.debug("Return code: %d" % process.returncode)

    xtmlib.debug_indent(-1)
    xtmlib.debug("Done")
